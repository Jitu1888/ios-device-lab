"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exec = exec;
exports.default = void 0;

require("source-map-support/register");

var _child_process = require("child_process");

var _shellQuote = require("shell-quote");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _helpers = require("./helpers");

const MAX_BUFFER_SIZE = 100 * 1024 * 1024;

async function exec(cmd, args = [], opts = {}) {
  const rep = (0, _shellQuote.quote)([cmd, ...args]);
  opts = Object.assign({
    timeout: null,
    encoding: 'utf8',
    killSignal: 'SIGTERM',
    cwd: undefined,
    env: process.env,
    ignoreOutput: false,
    stdio: 'inherit',
    isBuffer: false,
    shell: undefined,
    logger: undefined,
    maxStdoutBufferSize: MAX_BUFFER_SIZE,
    maxStderrBufferSize: MAX_BUFFER_SIZE
  }, opts);
  return await new _bluebird.default((resolve, reject) => {
    let proc = (0, _child_process.spawn)(cmd, args, {
      cwd: opts.cwd,
      env: opts.env,
      shell: opts.shell
    });
    let stdoutArr = [],
        stderrArr = [],
        timer = null;
    proc.on('error', err => {
      if (err.errno === 'ENOENT') {
        err = (0, _helpers.formatEnoent)(err, cmd, opts.cwd);
      }

      reject(err);
    });

    if (proc.stdin) {
      proc.stdin.on('error', err => {
        reject(new Error(`Standard input '${err.syscall}' error: ${err.stack}`));
      });
    }

    const handleStream = (streamType, streamProps) => {
      if (!proc[streamType]) {
        return;
      }

      proc[streamType].on('error', err => {
        reject(new Error(`${_lodash.default.capitalize(streamType)} '${err.syscall}' error: ${err.stack}`));
      });

      if (opts.ignoreOutput) {
        proc[streamType].on('data', () => {});
        return;
      }

      const {
        chunks,
        maxSize
      } = streamProps;
      let size = 0;
      proc[streamType].on('data', chunk => {
        chunks.push(chunk);
        size += chunk.length;

        while (chunks.length > 1 && size >= maxSize) {
          size -= chunks[0].length;
          chunks.shift();
        }

        if (opts.logger && _lodash.default.isFunction(opts.logger.debug)) {
          opts.logger.debug(chunk.toString());
        }
      });
    };

    handleStream('stdout', {
      maxSize: opts.maxStdoutBufferSize,
      chunks: stdoutArr
    });
    handleStream('stderr', {
      maxSize: opts.maxStderrBufferSize,
      chunks: stderrArr
    });

    function getStdio(isBuffer) {
      let stdout, stderr;

      if (isBuffer) {
        stdout = Buffer.concat(stdoutArr);
        stderr = Buffer.concat(stderrArr);
      } else {
        stdout = Buffer.concat(stdoutArr).toString(opts.encoding);
        stderr = Buffer.concat(stderrArr).toString(opts.encoding);
      }

      return {
        stdout,
        stderr
      };
    }

    proc.on('close', code => {
      if (timer) {
        clearTimeout(timer);
      }

      let {
        stdout,
        stderr
      } = getStdio(opts.isBuffer);

      if (code === 0) {
        resolve({
          stdout,
          stderr,
          code
        });
      } else {
        let err = new Error(`Command '${rep}' exited with code ${code}`);
        err = Object.assign(err, {
          stdout,
          stderr,
          code
        });
        reject(err);
      }
    });

    if (opts.timeout) {
      timer = setTimeout(() => {
        let {
          stdout,
          stderr
        } = getStdio(opts.isBuffer);
        let err = new Error(`Command '${rep}' timed out after ${opts.timeout}ms`);
        err = Object.assign(err, {
          stdout,
          stderr,
          code: null
        });
        reject(err);
        proc.kill(opts.killSignal);
      }, opts.timeout);
    }
  });
}

var _default = exec;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
