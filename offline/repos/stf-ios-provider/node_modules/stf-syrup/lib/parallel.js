(function() {
  var Assert, ParallelSyrup, Promise, _,
    __slice = [].slice;

  Assert = require('assert');

  Promise = require('bluebird');

  _ = require('lodash');

  ParallelSyrup = (function() {
    function ParallelSyrup(options) {
      this.options = options != null ? options : {};
      this.body = null;
      this.dependencies = [];
      this.resolved = null;
    }

    ParallelSyrup.prototype.define = function(body) {
      this.body = body;
      return this;
    };

    ParallelSyrup.prototype.dependency = function(dep) {
      Assert(dep, "Dependency is undefined; perhaps the module is missing module.exports?");
      Assert(dep.consume, "Dependency is missing `.consume()` method. Perhaps it's not a Syrup module?");
      this.dependencies.push(dep);
      return this;
    };

    ParallelSyrup.prototype.consume = function(overrides) {
      if (this.resolved) {
        return this.resolved;
      } else {
        return this.resolved = Promise.all(this.dependencies.map(function(dep) {
          return dep.consume(overrides);
        })).then((function(_this) {
          return function(results) {
            results.unshift(overrides);
            return _this.invoke.apply(_this, results);
          };
        })(this));
      }
    };

    ParallelSyrup.prototype.invoke = function() {
      var args, overrides;
      overrides = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (overrides == null) {
        overrides = {};
      }
      Assert(this.body, "Unable to `.invoke()` before setting body via `.define()`");
      args.unshift(_.defaults(overrides, this.options));
      return this.body.apply(null, args);
    };

    return ParallelSyrup;

  })();

  module.exports = function(options) {
    return new ParallelSyrup(options);
  };

  module.exports.Syrup = ParallelSyrup;

}).call(this);
