(function() {
  var ParallelSyrup, Promise, SerialSyrup,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Promise = require('bluebird');

  ParallelSyrup = require('./parallel');

  SerialSyrup = (function(_super) {
    __extends(SerialSyrup, _super);

    function SerialSyrup() {
      return SerialSyrup.__super__.constructor.apply(this, arguments);
    }

    SerialSyrup.prototype.consume = function(overrides) {
      var consumeSerial;
      if (this.resolved) {
        return this.resolved;
      } else {
        consumeSerial = (function(_this) {
          return function() {
            var cursor, next, results;
            cursor = 0;
            results = [];
            next = function() {
              if (cursor < _this.dependencies.length) {
                return _this.dependencies[cursor++].consume(overrides).then(function(value) {
                  results.push(value);
                  return next();
                });
              } else {
                return Promise.resolve(results);
              }
            };
            return next();
          };
        })(this);
        return this.resolved = consumeSerial().then((function(_this) {
          return function(results) {
            results.unshift(overrides);
            return _this.invoke.apply(_this, results);
          };
        })(this));
      }
    };

    return SerialSyrup;

  })(ParallelSyrup.Syrup);

  module.exports = function(options) {
    return new SerialSyrup(options);
  };

  module.exports.Syrup = SerialSyrup;

}).call(this);
